using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'highestValuePalindrome' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER n
     *  3. INTEGER k
     */

    public static string highestValuePalindrome(string s, int n, int k)
    {
    char[] arr = s.ToCharArray();
    bool[] changed = new bool[n];
    int left = 0, right = n - 1;
    int needed = 0;

    // first pass: make palindrome minimally
    while (left < right)
    {
        if (arr[left] != arr[right])
        {
            needed++;
        }
        left++;
        right--;
    }

    if (needed > k)
        return "-1";

    left = 0; right = n - 1;
    int remaining = k;

    // fix mismatches to become palindrome
    while (left < right)
    {
        if (arr[left] != arr[right])
        {
            char max = (char)Math.Max(arr[left], arr[right]);
            arr[left] = arr[right] = max;
            changed[left] = changed[right] = true;
            remaining--;
        }
        left++;
        right--;
    }

    // second pass: maximize by turning to 9
    left = 0; right = n - 1;
    while (left < right && remaining > 0)
    {
        if (arr[left] != '9')
        {
            if (changed[left] || changed[right])
            {
                if (remaining >= 1)
                {
                    arr[left] = arr[right] = '9';
                    remaining--;
                }
            }
            else if (remaining >= 2)
            {
                arr[left] = arr[right] = '9';
                remaining -= 2;
            }
        }
        left++;
        right--;
    }

    // middle digit if odd length
    if (n % 2 == 1 && remaining > 0)
    {
        arr[n / 2] = '9';
    }

    return new string(arr);

    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int n = Convert.ToInt32(firstMultipleInput[0]);

        int k = Convert.ToInt32(firstMultipleInput[1]);

        string s = Console.ReadLine();

        string result = Result.highestValuePalindrome(s, n, k);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
